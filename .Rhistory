find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
add2<-function(x,y){
x+y
}
add2(3,5)
above<-function(x,n){
use<-x>n
x[use]
}
x<-1:20
above(x)
above(x,12)
above<-function(x,n=10){
use<-x>n
x[use]
}
above(x)
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for( i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
pwd
dir()
setwd("~/")
file.choose()
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
cube<-function(x,n){
x^3
}
cube(3)
x<-1:10
print(x)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
clear(0)
clear()
a<-gl(2,5)
b<-gl(5,2)
c<-interaction(a,b)
print(c)
print(length(c))
help("interaction")
library(datasets)
data(iris)
?iris
lappply(iris$virginica,mean)
lapply(iris$virginica,mean)
s<-iris$virginica
s<-split(iris,iris$Species)
result<-lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
result<-lapply(s,function(iris) colMeans(iris[,c("Sepal.Length")]))
lapply(s$Sepal.Length,Mean)
lapply(s$Sepal.Length,mean)
print(lapply(s$Sepal.Length,mean))
result<-lapply(s,function(iris) colMeans(iris[,"Sepal.Length"]))
result<-lapply(s,function(iris) colMeans(iris[,c("Sepal.Length","Sepal.Width")]))
print(result)
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
debug(ls)
ls
help("<<-")
help("set")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
a<-matrix(c(2,0,0,3),2,2)
print(a)
b<-makeCacheMatrix(a)
print(b)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## cacheSolve will calculates the inverse of an matrix,
## by firstly seeks the inverse otherwise it calculates
## the inverse and return the inverse
cacheSolve <- function(x, ...) {
m<-x$getinverse()
if(!is.na(m)){
message("getting cachd inverse matrix")
return (m)
}
originalMatrix<-x$get()
m<-solve(originalMatrix)
x$setinverse(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## cacheSolve will calculates the inverse of an matrix,
## by firstly seeks the inverse otherwise it calculates
## the inverse and return the inverse
cacheSolve <- function(x, ...) {
m<-x$getinverse()
if(!is.na(m)){
message("getting cached inverse matrix")
return (m)
}
originalMatrix<-x$get()
m<-solve(originalMatrix)
x$setinverse(m)
m
}
makeCacheMatrix(a)
cacheSolve(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
c<-c(1,2,3,4,5)
makeVector(c)
cachemean(c)
x<-12:514
vec<-makeVector(x)
cachemean(vec)
cachemean(vec)
y<-c(1,2,3,4,5)
ym<-makeVector(y)
cachemean(ym)
ainv<-makeCacheMatrix(a)
cachemean(ainv)
cacheSolve(ainv)
help("is.na")
help(ls)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## cacheSolve will calculates the inverse of an matrix,
## by firstly seeks the inverse otherwise it calculates
## the inverse and return the inverse
cacheSolve <- function(x, ...) {
m<-x$getinverse()
if(!is.null(m)){
message("getting cached inverse matrix")
return (m)
}
originalMatrix<-x$get()
m<-solve(originalMatrix)
x$setinverse(m)
m
}
cacheSolve(ainv)
cacheSolve(ainv)
install.packages("caret")
n<-1000
means<-cumsum(sample(0:1,n,replace=TRUE))/(1:n)
cumsum(sample(0:1,n,replace=TRUE))
sample(0:1,n,replace=TRUE)
sample(0:1,10)
sample(0:1,10,replace=TRUE)
sample(0:1,replace=TRUE)
ppois(10,lambda=5)
ppois(c(10,10,10),lambda=5)
ppois(10,lambda=15)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
lm(y~x)$residuals
plot(x,y)
abline(lm(y~x))
mean(x)
sd(lm(y~x)$residuals)
lm(mtcars$wt~mtcars$mpg)
summary(lm(mtcars$wt~mtcars$mpg)$coefficients)
summary(lm(mtcars$wt~mtcars$mpg))$coefficients
sumcoef<-summary(lm(mtcars$wt~mtcars$mpg)$coefficients)
sumcoef[2,1]+c(-1,1)*qt(.975,df=lm(y~x)$df)*sumcoef[2,2]
sumcoef[2,1]+c(-1,1)*qt(.975,df=lm(mtcars$wt~mtcars$mpg)$df)*sumcoef[2,2]
sumcoef<-summary(lm(mtcars$wt~mtcars$mpg)$coefficients)
sumcoef
sumcoef<-summary(lm(mtcars$wt~mtcars$mpg))$coefficients
sumcoef[2,1]+c(-1,1)*qt(.975,df=lm(mtcars$wt~mtcars$mpg)$df)*sumcoef[2,2]
summary(lm(mtcars$mpg~mtcars$wt))
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
cf1<-summary(fit)$coefficients
cf1
clear
clearx <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x); plot(x, y); abline(lm(y ~ x))
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x); plot(x, y); abline(lm(y ~ x))
plot(x, resid(lm(y ~ x))); abline(h = 0)
resid(lm(y~x))
plot(x,y)
qt(.975,8)
qt(.975,9)
(3+c(-1,1)*2.26*sqrt(0.6))-(5+c(-1,1)*2.26*sqrt(0.68))
qt(.95,8)
(-3+c(-1,1)*1.859*1.5)-(1+c(-1,1)*1.859*1.8)
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
tg<-data(ToothGrowth)
library(ggplot2)
qplot(x=supp,y=len,data=tg,facet=dose,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
qplot(x=dose,y=len,data=tg,facet=supp,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
qplot(x=dose,y=len,data=tg,facets=supp,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
str(tg)
qplot(x=dose,y=len,data=ToothGrowth,facets=supp,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
qplot(x=dose,y=len,data=ToothGrowth,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
str(ToothGrowth)
geom_violin(scale="count")
q<-qplot(x=dose,y=len,data=ToothGrowth,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
q+geom_violin(scale="count")
par(mfrow=c(1,2))
qplot(x=dose,y=len,data=ToothGrowth,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
qplot(x=supp,y=len,data=ToothGrowth,xlab="Different Delivery Methods",ylab="Length of Teeth")
qplot(len~dose|supp,data=ToothGrowth,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
par(mfcol=c(1,2))
qplot(x=dose,y=len,data=ToothGrowth,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
qplot(x=supp,y=len,data=ToothGrowth,xlab="Different Delivery Methods",ylab="Length of Teeth")
par(mfcol=c(2,1))
qplot(x=dose,y=len,data=ToothGrowth,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
qplot(x=supp,y=len,data=ToothGrowth,xlab="Different Delivery Methods",ylab="Length of Teeth")
```
par(mfcol=c(2,1))
qplot(x=dose,y=len,data=ToothGrowth,xlab="Different Levels of Vitamin C",ylab="Length of Teeth")
qplot(x=supp,y=len,data=ToothGrowth,xlab="Different Delivery Methods",ylab="Length of Teeth")
mean(len,ToothGrowth$dose==0.5)
mean(ToothGrowth$len,ToothGrowth$dose==0.5)
mean(ToothGrowth[ToothGrowth$dose==0.5,"len"])
mean(ToothGrowth[ToothGrowth$dose==1,"len"])
mean(ToothGrowth[ToothGrowth$dose==2,"len"])
mu1<-mean(ToothGrowth[ToothGrowth$dose==0.5,"len"])
sd1<-sd(ToothGrowth[ToothGrowth$dose==0.5,"len"])
mu2<-mean(ToothGrowth[ToothGrowth$dose==1,"len"])
sd2<-sd(ToothGrowth[ToothGrowth$dose==1,"len"])
mu3<-mean(ToothGrowth[ToothGrowth$dose==2,"len"])
sd3<-sd(ToothGrowth[ToothGrowth$dose==2,"len"])
ci1<-mu1+(c(-1,1)*qt(.975,19)*sd1)/sqrt(20)
ci2<-mu2+(c(-1,1)*qt(.975,19)*sd2)/sqrt(20)
ci3<-mu3+(c(-1,1)*qt(.975,19)*sd3)/sqrt(20)
ci1,ci2,ci3
ci1
ci2
ci3
mu1
mu2
mu3
s1<-subset(ToothGrowth,supp=="OJ")
si
s1
ToothGrowth
sub1<-subset(ToothGrowth,supp=="OJ")
sub2<-subset(ToothGrowth,supp=="VC")
t.test(x=sub1$len,y=sub2$len)
mean(sub1$len)
mean(sub2$len)
t.test(x=sub1$len,y=sub2$len,var.equal=FALSE)
names(t.test(x=sub1$len,y=sub2$len,var.equal=FALSE))
a<-t.test(x=sub1$len,y=sub2$len,var.equal=FALSE)
a$statistic
a$parameter
a$conf.int
a$estimate
a$null.value
a$method
a$data.name
t.test(x=sub1$len,y=sub2$len,var.equal=TRUE)
names(getModelInfo())
names(getModelInfo())
library(caret)
names(getModelInfo())
setwd("Z:\\R\\Project_MachineLearning")
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
inTrain<-createDataPartition(y=spam$type,p=0.75)
head(inTrain)
inTrain<-craeateDataPartition(y=training$classe,p=0.8,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modellm<-train(classe~X,data=train,method="lm")
predictions<-predict(modellm,newdata=test)
inTrain<-createDataPartition(y=training$classe,p=0.8,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modellm<-train(classe~X,data=train,method="lm")
predictions<-predict(modellm,newdata=test)
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
inTrain<-createDataPartition(y=training$classe,p=0.8,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modellm<-train(classe~X,data=train,method="lm")
predictions<-predict(modellm,newdata=test)
inTrain<-createDataPartition(y=training$classe,p=0.8,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modellm<-train(classe~X,data=train,method="glm")
predictions<-predict(modellm,newdata=test)
names(training)
inTrain<-createDataPartition(y=training$classe,p=0.8,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modellm<-lm(classe~new_window,data=train)
predictions<-predict(modellm,newdata=test)
str(training$new_window)
inTrain<-createDataPartition(y=training$classe,p=0.8,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modellm<-lm(classe~num_window,data=train)
predictions<-predict(modellm,newdata=test)
str(training$num_window)
str(training$classe)
unique(predictions)
# Data splitting
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
#preProcess data
preObj<-preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS<-predict(preObj,training[,-58])$capitalAve
par(mfrow=c(1,2));hist(trainCapAveS);qqnorm(trainCapAveS)
#Fitting a model
set.seed(123)
modelFit<-train(type ~.,data=training,method="glm")
#prediction
predictions<-predict(modelFit,newdata=testing)
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
inTrain<-createDataPartition(y=training$classe,p=0.8,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modellm<-lm(classe~num_window,data=train)
modellm
predictions<-predict(modellm,newdata=test)
error<-sum(predictions!=test$classe)/length(test$classe)
a<-predictions!=test$classe
str(a)
unique(a)
b<-c(1,2,3)
c<-c(4,5,6)
b!=c
b<-c("spam","nonspam","spam")
c<-c("spam","spam","spam")
b!=c
sum(b!=c)
names(training)
modellm<-lm(classe~accel_forearm_x,data=train)
modellm<-glm(classe~accel_forearm_x,data=train)
predictions<-predict(modellm,newdata=test)
predictions<-predict(modellm,newdata=test$accel_forearm_x)
modellm<-lm(classe~accel_forearm_x,data=train)
modellm<-train(classe~accel_forearm_x,data=train,method="glm")
predictions<-predict(modellm,newdata=test$accel_forearm_x)
data(spam)
str(spam)
str(training$accel_forearm_x)
str(spamcharHash)
str(spam$charHash)
modellm<-train(classe~as.numeric(accel_forearm_x),data=train,method="glm")
str(training)
modellm<-train(classe~roll_dumbbell,data=train,method="glm")
predictions<-predict(modellm,newdata=test$roll_dumbbell)
